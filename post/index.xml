<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>博客 on Feng Sang | 桑峰</title>
    <link>/post/</link>
    <description>Recent content in 博客 on Feng Sang | 桑峰</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 10 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>笔记-RMarkdown和ggplot2</title>
      <link>/post/2022/07/10/blog/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022/07/10/blog/</guid>
      <description>R Markdown图表交叉引用 在R Markdown中给图表添加引用是首先需要在文件的输出格式设置为以下三种之一。
output: # bookdown::word_document2: default bookdown::html_document2: default # bookdown::pdf_document2: default 其次在绘制图表时需要添加标签，如下图1所示：
 Figure 1: 这是一个示例。  其中fig-demo为图片的标签。在文中引用时，输入\@ref(fig:fig-demo)即可自动添加图片引用。
 ggplot2添加标签 修改坐标轴端点样式 坐标轴端点样式可以通过如下命令修改，下图2、图3和图4分别是三种端点样式的是示例图。
theme(axis.line = element_line(lineend=&amp;#39;round&amp;#39;))  Figure 2: 这是round。   Figure 3: 这是butt。   Figure 4: 这是square。   给柱状图添加标签 给柱状图每个柱子添加相应的数字标签可以通过geom_text函数完成，显示效果如图5所示。
tmpData %&amp;gt;% count(MRIAGE_group, Sex) %&amp;gt;% ggplot(aes(x = MRIAGE_group, y = n, fill = Sex, label = n)) + geom_bar(stat = &amp;#39;identity&amp;#39;, position = position_dodge()) + geom_text(position = position_dodge(width = 0.</description>
    </item>
    
    <item>
      <title>配准方法示例</title>
      <link>/post/2022/07/07/blog/</link>
      <pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022/07/07/blog/</guid>
      <description>配准可以把不同空间中的脑影像进行对齐。典型地，在下面场景中就需要用到配准。
 我们有一个在b空间中（例如，MNI152）的感兴趣区，可我们想的到a空间（例如，个体空间）上感兴趣区中的脑指标。大致的思路是，将b空间中的脑图像和a空间中的脑图像进行配准并保存配准的转换参数。之后将转换参数应用到b空间的感兴趣区图像上就能得到a空间中的感兴趣区图像了。
 下面尝试用几种方法实现上述步骤。说明，b.nii.gz和roi.nii.gz都是在b空间中的图像，后者是感兴趣区。目的是的到a空间中的感兴趣区。
ANTs antsRegistrationSyNQuick.sh \ -d 3 \ -f a.nii.gz \ -m b.nii.gz \ -o b_space-a antsApplyTransforms -d 3 \ -i roi.nii.gz \ -r a.nii.gz \ -t b_space-a0GenericAffine.mat \ -t b_space-a1Warp.nii.gz \ -o roi_space-a.nii.gz  fsl fsl在配准的时候通常要经过线性和非线性配准，用到的命令分别是flirt和fnirt。
flirt -ref a.nii.gz \ -in b.nii.gz \ -omat b2a_linWarp.mat \ -v # 很慢 fnirt --ref=a.nii.gz \ --in=b.nii.gz \ --aff=b2a_linWarp.mat \ --cout=b2a_nlinWarp \ --verbose applywarp --ref=a.nii.gz \ --in=roi.nii.gz \ --warp=b2a_nlinWarp.nii.gz \ --out=roi_space-a.</description>
    </item>
    
    <item>
      <title>对PET图像进行归中心处理</title>
      <link>/post/2022/03/24/blog/</link>
      <pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022/03/24/blog/</guid>
      <description> 本段代码参考自：https://github.com/DlutMedimgGroup/Chinese-Brain-PET-Template/blob/master/Matlab%20Scripts/Reset_Origin.m
%对图像进行归中心的处理 function [] = Reset_Origin(ROOT) niftiRootPath = fullfile(ROOT, &amp;#39;*.nii&amp;#39;); niftiSubs = dir(niftiRootPath); %归中心处理 for i = 1:numel(niftiSubs) disp(fullfile(ROOT, niftiSubs(i).name))%显示当前处理图像名称 st.vol = spm_vol(fullfile(ROOT, niftiSubs(i).name)); vs = st.vol.mat\eye(4); vs(1:3,4) = (st.vol.dim+1)/2; spm_get_space(st.vol.fname,inv(vs)); end end </description>
    </item>
    
    <item>
      <title>FreeSurfer笔记</title>
      <link>/post/2022/03/15/blog/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022/03/15/blog/</guid>
      <description>The measures about curvatures mris_curvature_stats ?h.smoothwm.xxx.crv is the the binary-curvature files where xxx is the different measures. Detailed descriptation is as follows:
 k1 maximum curvature
k2 minimum curvature
K Gaussian = k1*k2
H Mean = 0.5*(k1+k2)
C Curvedness = sqrt(0.5(k1k1+k2*k2))
S Sharpness = (k1 - k2)^2
BE Bending Energy = k1k1 + k2k2
SI Shape Index = atan((k1+k2)/(k2-k1))
FI Folding Index = |k1|*(|k1| - |k2|)
 In each file, the corresponding measures for each vertex were saved.</description>
    </item>
    
    <item>
      <title>FreeSurfer笔记</title>
      <link>/post/2022/03/11/blog/</link>
      <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022/03/11/blog/</guid>
      <description>Outputs FreeSurfer首先去除颅骨（stripped skull），生成brainmask.mgz文件，并进一步分出灰质、白质和皮下结构，保存在aseg.mgz文件中。与此同时，得到白质/灰质的初步估计（?h.orig），随后对分界面进行进一步的调整得到?j.white。在?h.white的基础上，分界面继续向外膨胀得到?h.pial，并进一步膨胀得到?h.inflated。?h.sphere为?h.inflated膨胀形成的球面。可以用来与其他空间图像进行配准（例如fsaverage）。
recon-all命令中的-qcache可以生成fsaverage空间中的且经过平滑后的数据。
label文件夹 .ctab文件为颜色表（color table），存储不同atlas定义脑区的颜色。.annot文件为分区信息，其中包含每个vertex所属的脑区等信息。.label文件保存所有vertex所属脑区编号和坐标。
 surf文件夹 ?h.area为midthickness表面的面积，?h.area.pial为灰质（软脑膜）表面的面积。?h.sulc为沟回宽度。
 stats文件夹 保存不同分区下的灰质指标。
  命令 mris_preproc 将个体皮层空间中的指标文件投射到fsavergae等标准皮层空间。
Example-1 Resample abcXX-anat/surf/lh.thickness onto fsaverage:
mris_preproc --s abc01-anat \ --s abc02-anat \ --s abc03-anat \ --s abc04-anat \ --target fsaverage \ --hemi lh \ --meas thickness \ --out abc-lh-thickness.mgh  Example-2 Same as #1 but smooths by 5mm fwhm:
mris_preproc --s abc01-anat \ --s abc02-anat \ --s abc03-anat \ --s abc04-anat \ --target fsaverage \ --hemi lh \ --meas thickness \ --fwhm 5 \ --out abc-lh-thickness.</description>
    </item>
    
    <item>
      <title>CIFTI文件的读取和可视化</title>
      <link>/post/2022/02/22/blog/</link>
      <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022/02/22/blog/</guid>
      <description>CIFTI (Connectivity Informatics Technology Initiative) 是HCP项目中开发的神经影像存储格式。具体可参考2016年Glasser等人发表的文章(Glasser et al., Nature neuroscience, 2015)。开发者在GitHub上提供了读写的MATLAB工具包，可在此处下载：https://github.com/Washington-University/cifti-matlab。</description>
    </item>
    
    <item>
      <title>Singularity-05-Matlab&amp;fmriprep</title>
      <link>/post/2022/02/21/blog/</link>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022/02/21/blog/</guid>
      <description>  运行MATLAB 使用matlab镜像运行matlab可使用如下命令：
singularity exec matlab-r2020a.img matlab -batch xxx 其中matlab-r2020a.img为镜像名称，xxx为matlab脚本，不包含.m。
 运行fmriprep 脑院高性能平台最高支持fmriprep版本为20.1.3，版本再高会报告I/O异常的错误。
在镜像中运行fmriprep的命令（不同版本的命令有些许差异，这里以20.1.3为例）如下：
singularity exec fmriprep-20.1.3.simg fmriprep data-test/ fres_data-test/ participant \ --skip_bids_validation \ --participant_label 12002 \ -w fwk_data-test/ \ --verbose \ --fs-license-file license_lin.txt 其中fmriprep-20.1.3.simg为镜像名称。data-test为存放所有被试的文件夹。
运行smriprep的命令如下：
singularity exec fmriprep-20.1.3.simg smriprep data-test/ sres_data-test/ participant \ --pariticipant_label 12002 \ -w fwk_data-test/ \ --fs-license-file license_lin.txt  </description>
    </item>
    
    <item>
      <title>下载templateflow</title>
      <link>/post/2022/02/18/blog/</link>
      <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022/02/18/blog/</guid>
      <description>  templateflow中包含了一些典型的神经影像脑模版，可在fmriprep等工具中使用。本文主要介绍如何下载templateflow。
准备 GitHub上有它的仓库，但是那只是DataLab的索引，因此直接下载是不能下载到模版文件的。需要通过DataLab下载。
首先，安装DataLab（以Ubuntu 21.10为例）。
conda install -c conda-forge datalad # OR sudo apt-get install datalab  下载 下载索引文件，并使用DataLab下载模版。
git clone https://github.com/templateflow/templateflow.git cd templateflow # tpl-* 下载所有模版 datalad get -r tpl-fsLR  通过python下载 笔者在使用datalad下载过程中，会经常遇到进度条长时间不动的情况。而且印象当中，笔者以前用python下载成功过，速度也不是很慢。因此这里将python下载templateflow的方法也追加进来。
首先设置环境变量。
export TEMPLATEFLOW_HOME=$HOME/.templateflow 使用pip安装templateflow包。
python -m pip install -U templateflow 下载templateflow。
python -c &amp;quot;from templateflow.api import get; get([&amp;#39;MNI152NLin2009cAsym&amp;#39;, &amp;#39;MNI152NLin6Asym&amp;#39;, &amp;#39;OASIS30ANTs&amp;#39;, &amp;#39;MNIPediatricAsym&amp;#39;, &amp;#39;MNIInfant&amp;#39;])&amp;quot; 这里可以根据需要下载相应的模版文件。
 相关链接 templateflow项目地址：https://github.com/templateflow/
DataLad网址：https://www.datalad.org/
python下载参考网址：https://fmriprep.org/en/1.5.9/spaces.html
 </description>
    </item>
    
    <item>
      <title>Singularity-04-安装MATLAB</title>
      <link>/post/2022/02/17/blog/</link>
      <pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022/02/17/blog/</guid>
      <description>以下是记录本人在使用学院高性能计算平台运行singularity中遇到的问题以及相应的解决方法，不一定适用于其他场景。
建立基础镜像 sudo singularity build --sandbox tmp/ docker://centos:7 尝试过ubuntu:20.04和18.04，在服务器上均会报告“FATAL: kernel too old”的错误。Centos6.10和7可以，但是6.10的yum源已经不再支持。因此使用Centos7作为基础镜像。
 安装MATLAB 这里参考：https://zhuanlan.zhihu.com/p/394298249
需要注意的是，安装之前，需要在系统里面安装一些库文件和编译器，命令如下：
yum install libX11 libXmu yum install gcc java-11-openjdk-devel libXmu中包含libXt.so.6。
 后处理 安装好MATLAB后，发现无法通过singularity exec去调用。在/environment文件中将MATLAB的安装路径添加进PATH环境变量里面也无法直接运行（可能是写入的命令格式有问题，不确定）。之后查到可以定义一个recipe文件（append.def），通过已经生成的镜像重新构建镜像。recipe文件内容如下：
Bootstrap: localimage From: tmp/ %environment export PATH=/usr/local/matlab/R2020a/bin:$PATH 然后重新构建镜像：
sudo singularity build --sandbox senv-matlab/ append.def 构建完成后，需要将镜像打包为可读写的格式（.img文件）。
sudo singularity build --writable senv-matlab.img senv-matlab/ 这里生成的senv-matlab.img就可在服务器上使用了，也可在服务器上将其转换为压缩格式（.sif/.sqsh/.simg文件等）。不知道为什么直接在本地（Ubuntu 21.10）压缩后，在本地无运行镜像，会报告如下错误。
ERROR : Failed to mount squashfs image in (read only): Invalid argument ABORT : Retval = 255  参考 https://zhuanlan.</description>
    </item>
    
    <item>
      <title>Find clusters in a image</title>
      <link>/post/2022/01/19/blog/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022/01/19/blog/</guid>
      <description>问题 我们在对神经影像数据做完统计后（例如ICA），会得到相应的mask二值文件。但是有些情况下，我们还需要进一步对mask中每一个cluster进行分析（例如计算mask中每个cluster之间的功能连接）。所以我们需要从mask文件中得到每一个cluster。由于没有想到有哪个现成的工具包可以解决上述的问题。因此，本文试图用自己的方式去解决上述的问题。
 方法 思路一 看到这个问题的时候，最朴素的想法就是用MRIcron/GL或者ITK-SNAP手动将mask中的每一个cluster标记出来。
 思路二 虽然上述手动标记的方法能解决这个问题，但是显得没那么优雅（bushi。就想换用代码解决这个问题。而且写完代码下次再碰到类似的问题，就能直接使用了（还能水一篇推送。
首先我想着先找出mask中所有非零元素的下标，然后选一个非零元素，再去判断这个元素的邻域是否是0（如果是0就意味着已经到了这个cluster的边缘）。但是在三维图像里面，要判断邻域是否到达边缘，需要写8个条件判断，这也很不优雅（主要还是找到了一个现成的轮子。
之后在找“轮子”的时候，看到了scipy包里面的一个函数可以实现上面的过程。因此通过调用它近乎完美地解决了最开始的问题（bushi。下面是相应的代码。
import nibabel as nib from scipy.ndimage import measurements import logging logging.basicConfig(level=logging.INFO) img = nib.load(&amp;#39;test-binary.nii&amp;#39;) data = img.get_fdata() labels, num_labels = measurements.label(data) logging.info(f&amp;#39;The number of cluster is {num_labels}&amp;#39;) nib.save(nib.Nifti1Image(labels, img.affine), f&amp;#39;test_cluster-mix.nii&amp;#39;) for i in range(num_labels): tmp_data = np.zeros(data.shape) tmp_data[labels == i + 1] = 1 nib.save(nib.Nifti1Image(tmp_data, img.affine), f&amp;#39;test_cluster-{i+1}.nii&amp;#39;) test-binary.nii是从Neurosynth上随便找的一个功能连接图谱，并以±0.2作为阈值得到的mask文件（Figure 1）。
 Figure 1: test-binary.nii可视化结果。  上述代码运行后，对于mask中的每一个cluster会得到一个.nii文件，同时也会得到一个混合了所有cluster的.nii文件。结果如Figure 2所示。
 Figure 2: 混合了所有cluster的结果，其中每个cluster用一个整数标记。    参考 https://neurosynth.</description>
    </item>
    
    <item>
      <title>Python for Neuroimage data</title>
      <link>/post/2021/11/20/blog/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/11/20/blog/</guid>
      <description>DICOM文件 DICOM格式是医学成像设备输出的统一的文件格式，它包含数据头信息和数据信息两部分。其中头信息包含扫描设备的信息以及被试的信息等，另外还包括其他关于数据的元信息。数据部分是扫描设备采集到扫描物体的信号值。
利用Pydicom包可以使用Python操作DICOM文件，包括对DICOM文件的读写、头信息的增删改等。
安装 pip install pydicom # 或 conda install -c conda-forge pydicom  示例数据 from pydicom.data import get_testdata_file fpath = get_testdata_file(&amp;quot;CT_small.dcm&amp;quot;) fpath Out: ‘/Applications/miniconda3/lib/python3.9/site-packages/pydicom/data/test_files/CT_small.dcm’
 读入文件 from pydicom import dcmread ds = dcmread(fpath) ds 输出：
Dataset.file_meta ------------------------------- (0002, 0000) File Meta Information Group Length UL: 192 (0002, 0001) File Meta Information Version OB: b&amp;#39;\x00\x01&amp;#39; (0002, 0002) Media Storage SOP Class UID UI: CT Image Storage (0002, 0003) Media Storage SOP Instance UID UI: 1.</description>
    </item>
    
    <item>
      <title>Weekly summary</title>
      <link>/post/2021/11/19/blog/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/11/19/blog/</guid>
      <description>自定义Colormap 在一些场景下，我们需要自己构造数字与颜色的对应关系。比如，我们在探究每个ROI随龄变化的趋势时，我们需要将回归方程中年龄的系数展示在脑图上。朴素的想法是，我构造一个关于系数与颜色的映射关系，给定某一系数，就返回相应的颜色。实现方法如下：
library(tidyverse) library(RColorBrewer) data &amp;lt;- data.frame(Val = rnorm(100)) %&amp;gt;% as_tibble() # 选择合适的颜色 colors &amp;lt;- brewer.pal(11, &amp;#39;RdBu&amp;#39;) # 考虑到数字的正负号，我们这里用差异较明显的颜色区分正负 pos.color &amp;lt;- colorRampPalette(colors[6:1])(1000 * round(max(data$Val), 3) + 1) neg.color &amp;lt;- colorRampPalette(colors[6:11])(-1000 * round(min(data$Val), 3) + 1) res &amp;lt;- rep(&amp;#39;&amp;#39;, length(data$Val)) for (i in 1:length(data$Val)) { if (round(data$Val[i], 3) &amp;lt; 0) { res[i] &amp;lt;- neg.color[1000 * round(-data$Val[i], 3)] } else if (round(data$Val[i], 3) &amp;gt; 0) { res[i] &amp;lt;- pos.color[1000 * round(data$Val[i], 3)] } else { res[i] &amp;lt;- pos.</description>
    </item>
    
    <item>
      <title>Toolbox for WMH</title>
      <link>/post/2021/11/07/blog/</link>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/11/07/blog/</guid>
      <description>介绍 白质高信号（white matter hyperintensity, WMH）是一种因脑白质病变导致的、在T2 Flari像上表现为高灰质值的现象。在相关研究中，确定白质高信号区域是一个基本的问题。一般认为，由专业的影像科医生或受过培训的人员手动分割的结果是金标准。然而，手动分割费时费力。因而，研究者提出了许多自动半自动的分割工具。本文将对几种常用的白质高信号自动分割工具的用法进行简单介绍。
 LST LST (https://www.applied-statistics.de/lst.html) 是基于SPM的白质高信号分割工具，它包含两个分割算法：LPA和LGA。其中，LPA不需要T1数据，而LGA需要T1和Flari数据。
代码入下：
LPA 尽管LPA在分割WMH的时候不需要T1数据，然而在输入里面还是可以将T1数据输入，用来作为配准的参考图像。
% WMH segment by LPA in LST. close all; clear; clc; % Set SPM12 into Path. SPM_PATH = &amp;#39;~/Tools/spm12&amp;#39;; addpath(SPM_PATH); % Set root path. ROOT = &amp;#39;Work&amp;#39;; subs = dir(ROOT); subs = subs(3:end); for i = 1:numel(subs) % for single subject. disp(subs(i).name); sub_path = fullfile(ROOT, subs(i).name); t1_path = fullfile(sub_path, &amp;#39;t1.nii&amp;#39;); if ~exist(t1_path, &amp;#39;file&amp;#39;) % gunzip the .</description>
    </item>
    
    <item>
      <title>数据可视化：和弦图</title>
      <link>/post/2021/09/19/blog/</link>
      <pubDate>Sun, 19 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/09/19/blog/</guid>
      <description>和弦图用于展示不同实体之间的关系，在脑网络研究中也经常使用。本文将介绍一个绘制和弦图的网站并演示其用法。
网址：https://charticulator.com
数据准备 首先准备两个表格，内容分为为和弦图中的节点信息和连边的信息，对应示例中的node.csv和link.csv。
node.csv中必须包含id列，用于唯一标识和弦图中的节点。示例中的节点为Schaefer等人在2018年发布的100个脑区的脑图谱。其他列为可选列，可以用来指定和弦图中节点的大小等。
link.csv中必须包含source_id和target_id列，其值为node.csv中id的值。link.csv中每一行表示和弦图中一条连边。同样，其他列为可选列，可以指定和弦图中连边的宽度等。
 步骤 加载数据 打开网站后，将node.csv和link.csv分别拖动到Node和Links，然后点击Done即可完成数据的加载。之后网页会跳转到绘图页面。
 添加节点 第一步，点击顶栏的矩形块，并在绘图区插入选中的矩形块，会自动添加与node.csv文件中指定的节点个数相等的矩形块。 第二步，将id拖动到矩形块的color属性上，用不同的颜色来区分节点。 第三步，将矩形块按照x轴堆叠的方式排列，并设置为极坐标显示。 第四步，调整矩形块的内外环半径。
 添加连边 第一步，点击顶栏的边按钮，添加连边。 第二步，将target_id的颜色设置为连边的颜色。 第三步，将连边权重值设置为边的宽度。
 添加文本 第一步，点击顶栏文本按钮。 第二步，将id拖动到添加的文本元素上。 第三步，调整文本的方向和大小。
 导出图片 点击保存按钮，并调整dpi后，得到最终的图片。
  参考文献 脑图谱文章：Schaefer, Alexander, Ru Kong, Evan M. Gordon, Timothy O. Laumann, Xi-Nian Zuo, Avram J. Holmes, Simon B. Eickhoff, and B. T. Thomas Yeo. 2018. “Local-Global Parcellation of the Human Cerebral Cortex from Intrinsic Functional Connectivity MRI.” Cerebral Cortex 28(9):3095–3114.</description>
    </item>
    
    <item>
      <title>文献总结-从儿童期到青少年期结构共变网络的改变</title>
      <link>/post/2021/09/12/blog/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/09/12/blog/</guid>
      <description>期刊：Scientific Reports, (2021)11:9415
摘要 结构共变（SCN）是指在群体水平上不同大脑区域形态学指标之间的相关。它可以为发育期功能性网络模块的形成提供皮层结构的信息。本研究探究了从儿童期到青少年期大脑结构共变网络的变化模式，而这一时期会发生明显的大脑结构性的重组。本研究的被试在他们8.5岁到14.5岁之间进行了核磁扫描。研究者使用滑动时间窗方法选择一组被试作为“age-bin”，在每个“age-bin”上建模得到结构共变网络。之后，研究者使用广义加性模型（GAM）检查网络属性的随龄变化模式。结果显示了平均连接强度和网络密度的非线性变化轨迹。这表明在青少年早期阶段存在一段皮层结构属性趋同的时期，对应于前人研究中的脑区特异化现象。在儿童后期，感觉运动区域出现了一些“Hub”脑区。然而，到了青少年中期，联合皮层中的“Hub”节点范围和强度都出现了增加。此外，这些脑区水平的改变与发育期皮层变薄的速率相关。在对典型功能性网络连接的研究中发现，额顶、默认和注意网络均表现出了网络内部和网络之间共变性的随龄增加。本研究发现的脑区和脑网络层面上的发育模式，与青少年早期社会情绪和其他通过高级认知网络支持的复杂执行功能，在这一时期发生的一系列改变是一致的。
 背景 许多纵向研究验证了儿童期到青少年期大脑皮层变薄的发育模式，反映了突触修剪、髓鞘化或皮层形态发育特征。然而，这种发育模式在不同皮层区域不是同时发生的。重要的是，这种变异性表明结构皮层网络也可能在这一时期成熟。理解皮层区域之间不断变化的关系可能提供灰质发育单变量研究之外的独特信息，因为结构特性的协变性被认为是由经验依赖的可塑性和相互营养的过程产生的，例如，共同激发的区域连接在一起。特别是，儿童和青少年之间的过渡以及相关的青春期过程，带来了第二波结构“重组”，仅次于婴儿。然而，在这一时期缺乏对结构皮层网络发展的有针对性的研究。
结构共变是一种多元分析技术，它概念化了不同大脑区域的形态特征在群体水平上如何相互关联。为此，对一组受试者的每个大脑区域测量皮质厚度等属性，并对整个组的每对区域计算这些区域估计值之间的相关性。虽然大多数研究都描述了某一个生命周期内结构共变的拓扑特性（如婴儿、儿童/青少年、老年），但一小部分研究表明，这些特性也会随着时间而变化。对儿童早期到青春期晚期的研究发现，网络的整合（即促进分布式大脑区域信息组合的能力）不断增加，分离（即促进区域组内专业化处理的能力）不断减少，然后是青春期的反向变化或达到平台期。一些关注青年期及青春期后期的研究表明，在14岁到20岁之间，大脑皮层整体相关性的强度在趋于稳定之前，存在降低的现象。这可能反映了不同大脑区域成熟时间的个体间差异。综上所述，这些研究提供了越来越多的证据，表明儿童和青少年之间的过渡可能以不断演变的结构网络特性为特征，并且这些整体变化在模式上可能是非线性的。 还有新出现的证据表明共变模式存在区域差异。例如，研究发现，从幼儿期到青年期，联系皮质的连接强度和效率持续增加，而边缘皮质和感觉运动皮质的连接强度和连接效率分别增加和减少。其他研究表明，神经认知系统（即功能团体内的区域）在青春期后期和青年期具有不同的发育模式，额叶顶网络的共变下降幅度最大。使用毕生发展方法的研究人员还发现，高阶认知系统表现出结构共变模式可以将年轻成年人与儿童/青少年和老年人区分开来。因此，以前的文献在使用广泛的年龄范围或寿命方法时确定了协方差模式的区域变异性。然而，将这些分析扩展到特别关注从儿童期到青春期的过渡期，可能会对神经发育的突出模型提供新的见解。
青春期早期的生物学发育也具有显著的性别差异，这通常被认为是这一时期出现的精神病理学发病率显著性别差异的基础。虽然研究在很大程度上未能确定新生儿、青年和老年人在结构共变模式方面的差异，但针对儿童向青少年过渡的有针对性的研究可能为性别差异提供新的见解。由于支持身体成熟的青春期激素变化也作用于大脑的受体，同时女性青春期较早的成熟，因此一些人认为她们可能比男性经历更早的皮质和白质成熟。尽管许多研究未能确定皮层变薄的性别差异，但一些使用多变量方法的研究也支持了皮层变薄存在显著的性别差异。因此，对网络特性变化的研究可能为青春期早期男女大脑皮层成熟的潜在差异模式提供新的见解。
目前的研究扩展了从儿童到青春期过渡期间大脑结构网络特性的相关研究。正如Váša和同事所强调的，以前的研究通常通过将参与者分为离散（和广泛）年龄组来提供结构网络发展的粗粒度解决方案。对年龄组的任意定义也可能导致文献中的不一致。因此，我们利用滑动窗口方法来精确描述该过渡期内结构共变网络的变化（即，区域结构属性之间的关系如何随时间变化）。我们的年龄定义结构共变网络基于较大参与者数量的滑动窗口和较窄的年龄范围从而提高了我们的相关性估计的稳健性。我们假设在从儿童晚期到青春期早期的过渡期间，整体连接密度增加，然后在青春期中期达到平稳或减少。我们还研究了共变网络拓扑特性的区域性变化，并在神经认知网络的背景下描述了这些变化。我们假设，在此期间，联合皮质，特别是额叶顶网络，可能表现出最大的共变模式变化。接下来，我们研究了皮质变薄和共变模式之间的关系，推测在青春期早期表现出最大变薄的区域也可能与大脑其他部分具有最大的共变性。最后，我们探讨了网络整体属性和神经认知网络中的性别差异。
 研究方法 参与者信息 参与者来自澳大利亚墨尔本的社区，并被纳入两个纵向项目之一：1）儿童注意力项目（NICAP）的神经成像，以及2）儿童到青少年过渡研究（iCATS）的大脑发育成像。NICAP参与者作为典型的发展对照被招募到一项以社区为基础的患有和不患有ADHD的儿童队列研究中。排除标准包括MRI禁忌症、发育障碍、神经或严重疾病史（如糖尿病、肾病）和精神药物。对于这两个队列，均从所有参与者的父母/监护人处获得书面知情同意。伦理批准由墨尔本皇家儿童医院人类研究伦理委员会批准。iCATS协议还被墨尔本大学胡德胡德研究所批准，NICAP协议得到迪肯大学人类研究伦理办公室的批准。
NICAP样本在9.5至14.5岁之间进行了多达3次的重复评估，评估间隔约为18个月(M = 1.432, SD = 0.222, 1.021 - 2.330年)。iCATS样本在8.5至13.5岁之间进行了2次重复评估，评估间隔约为36个月(M = 2.763，SD = 0.243，2.158 - 3.344年)。这两个样本在性别、发育程度和智力均无显著差异。然而，在基线检查时，iCATS样本明显比NICAP样本年轻(平均值: iCATS = 9.556, NICAP = 10.425; t(157) = -14.928, p &amp;lt; 0.001)，具有较高的社会经济地位（基于澳大利亚人口普查数据的相对社会经济优势和劣势区域指数的社会经济指数；平均值: iCATS = 1056.175, NICAP = 1018.326; t(198) = 4.887, p &amp;lt; 0.001）。
在质量控制期间的排除（详见下文）之后，最终样本包括192名年龄在8.5-14.5岁的参与者（96名女性，90名NICAP）的366次扫描，用于创建横断面窗口。具体而言，59名参与者（28名男性）进行了一次扫描，92名参与者（46名男性）进行了两次扫描，41名参与者（22名男性）进行了三次扫描。
 MRI采集和处理 这两个项目的神经成像数据都是在澳大利亚墨尔本默多克儿童研究所的3T西门子扫描仪（德国埃尔兰根西门子）上获得的。受试者在第1波实际扫描之前完成模拟扫描（如果受试者愿意或研究人员认为合适，则在随后的第1波中重复）。在参与之前，他们还获得了MRI信息（包括视频），以使他们熟悉手术过程并尽可能减少焦虑。在TIM Trio扫描仪上采集iCATS的第一批和NICAP第一和第二批次被试。NICAP的最后一批次参与者是在升级到MAGNETOM Prisma扫描仪后收集的，该扫描仪已在统计建模中进行了说明。
T1加权图像通过FreeSurfer 6.0进行处理，FreeSurfer 6.0是一个免费提供的用于皮质重建和体积分割的图像分析套件。 具体而言，使用亚毫米级重建37和纵向流处理图像，该纵向流使用稳健的反向一致配准，从所有可用数据创建对象模板空间内的无偏。该模板被用作每个时间点初始化分割过程的估计值，提供有关解剖结构的公共信息，并被发现显著提高了可靠性和统计能力。对1) 原始图像和2)（纵向）皮质重建的质量进行目视检查，并对所有扫描进行评级。原始图像的“响铃”（1：无响铃；2：局限于小皮质区域的轻微响铃；3：更多响铃延伸至白质和/或覆盖更多大脑区域；4：广泛响铃）和“模糊”评分为4分（1：清晰清晰的图像；2：轻微模糊；3：或相当模糊；4：全程模糊）。排除任何一个等级的“3”和“4”评级。处理后的图像在白色和软膜表面的准确度上以3分制进行评级（1：近乎完美的重建；2：仅限于大脑小区域的轻微重建问题；3：重建不良，白质或脑脊液广泛区域被低估，包括灰质）。排除“3”评级。图像也通过MRIQC处理补充目视检查。这导致34名参与者总共排除了37次扫描（即3名参与者删除了2次扫描）。未对剩余（包括）数据进行手动编辑。从HCP处理流程的多模式分组图谱（HCP-MMP1）的360个区域提取平均皮质厚度估计值并用于后续分析。补充分析检查了Desikan Killianny Tourville（DKT）图谱的62个区域的平均皮质厚度。</description>
    </item>
    
    <item>
      <title>一周小结</title>
      <link>/post/2021/09/03/blog/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/09/03/blog/</guid>
      <description>Python并行处理 Python 中的concurrent包提供了对于并行运行的接口，包括进程级并行和线程级并行。下面是一个例子。
from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor def func(a, b): return a*b if __name__ == &amp;#39;__main__&amp;#39;: n_core = 4 nums = 10000 b = 2 res = [0 for _ in range(nums)] with ProcessPoolExecutor(n_core) as pool: futures = {pool.submit(func, i, b): i for i in range(1, nums)} for f in futures: res[futures[f]] = f.result() res = [0 for _ in range(nums)] with ThreadPoolExecutor(n_core) as pool: futures = {pool.</description>
    </item>
    
    <item>
      <title>一周小结</title>
      <link>/post/2021/08/30/blog/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/08/30/blog/</guid>
      <description>  本文记录了上周笔者在使用GRETNA和CAT12中遇到的一些问题和想法。
GRETNA GRETNA是脑网络中进行图论分析的一款工具包。它也支持对于静息态功能磁共振成像(fMRI)数据的预处理。在fMRI数据的网络拓扑分析中，最常见的网络建模方式是功能连接网络。其中，网络的节点表示脑区，而网络连边表示不同脑区BOLD信号时间序列的相关值——相关值越高，表明两个脑区连接越紧密。
网络中连边值的问题是重要的，因为在另外一些网络中，网络连边值越高表明两个节点之间的代价越高。例如在公路网络中，节点为不同的城市，连边表示不同城市之间的距离。
在GRETNA计算网络的平均距离时，在得到距离矩阵后进行了取倒数的操作。这一步，对于相关系数网络，即连边值越到，节点连接越紧密的加权网络而言是合适的。因为距离矩阵中的值表示的含义是两个节点之间的最短路径的权重和。它的值越大，表明两个节点连接越紧密。为了与通常的距离越远，代价越高的认知相一致，取倒数后就保证了连接越紧密的节点，它们的“距离”也越短。
但对于二值网络而言，两个节点的距离是其最短路径中边的条数，也就是距离矩阵中的值的含义。节点距离越近，它们的连边条数也越少，“距离”也越短。因此这里不应该在进行取倒数的操作。
 CAT12 使用CAT12中的Segment模块进行皮层构建时，默认会得到个体皮层厚度的文件。如果要进行SBM分析，还需要将个体皮层厚度文件转换到标准空间(fsaverage)中，这一步在CAT12中是包含在resample模块中的。
另外，CAT12也提供了提取ROI上相关指标的功能。它在提取ROI指标时，也是将个体的指标文件转换到标准空间中，再计算图谱文件(annotation)定义的ROI的指标。这里个体指标转换到标准空间使用的也是resample模块，不过这里的平滑核是0. 这也是容易理解的，因为在计算ROI指标时，会平均整个ROI中所有的Vertex。这样由于个体指标再转换到标准空间中产生的误差就会被平均掉。而在进行SBM分析时，因为是逐Vertex进行的统计，上面的误差就会对统计产生影响，因此在SBM中，resample并且设置合适的平滑核大小是重要的。
 </description>
    </item>
    
    <item>
      <title>Python作图-Heatmap</title>
      <link>/post/2021/08/22/blog/</link>
      <pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/08/22/blog/</guid>
      <description>本文用于记录笔者在使用seaborn绘制heatmap中遇到的一些问题和解决方法。
完整的代码如下所示：
import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt import matplotlib.font_manager as fm import matplotlib.ticker as ticker sns.set_theme(style=&amp;quot;white&amp;quot;) mat = np.random.rand(68*68) mat = mat.reshape((68, 68)) labels = pd.DataFrame({&amp;#39;Name&amp;#39;: range(1, 69)}) cmap = sns.color_palette(&amp;#39;flare&amp;#39;, as_cmap=True) font = fm.FontProperties(fname=&amp;#39;Resource/font/calibri.ttf&amp;#39;) p = sns.heatmap( mat, mask=(mat==0), cmap=cmap, square=True, xticklabels=True, yticklabels=True, center=0.75, vmin=0.5) ax = p.figure.axes[0] ax.axvline(34, color=&amp;#39;k&amp;#39;, alpha=0.8, linestyle=&amp;#39;-&amp;#39;, linewidth=0.8) ax.axhline(34, color=&amp;#39;k&amp;#39;, alpha=0.8, linestyle=&amp;#39;-&amp;#39;, linewidth=0.</description>
    </item>
    
    <item>
      <title>远程Jupyter Notebook设置</title>
      <link>/post/2021/06/24/blog/</link>
      <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/06/24/blog/</guid>
      <description>通过Jupyter可以使用远端服务器的计算资源，以下是设置步骤。
安装Jupyter ## pip 安装 pip install notebook ## conda安装 conda install -c conda-forge notebook  服务器端设置 生成密码密文： jupyter notebook password Enter password: Verify password: &amp;gt; [NotebookPasswordApp] Wrote hashed password to /home/you/.jupyter/jupyter_notebook_config.json 密文保存在/home/you/.jupyter/jupyter_notebook_config.json文件中。
 修改配置文件 ## 打开前面生成的配置文件 vim ~/.jupyter/jupyter_notebook_config.py ## 修改配置内容 c.NotebookApp.ip=&amp;#39;*&amp;#39; ## 修改成将之前生成的密文 c.NotebookApp.password = u&amp;#39;xxx&amp;#39;  启动Jupyter jupyter notebook --no-browser --port=8889   本地设置 打开本地终端，输入以下命令：
ssh -N -f -L localhost:8836:localhost:8889 xxx@ip 之后打开浏览器，在地址栏中输入http://localhost:8836即可。
 参考 [1] https://blog.csdn.net/weixin_40641725/article/details/114636779</description>
    </item>
    
    <item>
      <title>Python函数参数中的“*”</title>
      <link>/post/2021/06/17/blog/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/06/17/blog/</guid>
      <description>Python中，*除了可用于乘法和乘方运算外，还可以把它放在函数形式参数的前面，用来传递多个参数或进行参数的拆解。下面简单介绍后者的用法。
传递多参数 示例1 def f(*x): print(x) f(1, 2, 3, 4) 输出：(1, 2, 3, 4)
可见，虽然在定义函数f()时，只用了一个形式参数x，但是由于*的存在，再调用该函数时，即便是传递多个参数，也会把多个参数当成一个变量x（这里当作元组处理）来处理。
 示例2 def f(**x): print(x) f(a=1, b=2, c=3, d=4) 输出：{‘a’: 1, ‘b’: 2, ‘c’: 3, ‘d’: 4}
**也可以接收多个参数，但是跟*不同的是，**接收带有key的参数，并且将多个key-value形式的参数转换成为一个字典。
  拆分参数 def f(*x): print(x) # Test 1 f(1, 2) # Test 2 f((1, 2)) # Test 3 f(*(1, 2)) 三次调用的输出分别为：
Test 1: (1, 2) Test 2: ((1, 2),) Test 3: (1, 2)
Test 1的结果跟{#demo1}一样，此时的x为两个参数构成的元组。Test 2输入参数变成了一个由两个元素构成的元组，此时的x把这个元组当成一个整体作为它的第一个元素，形成了一个新的元组。Test 3在传递参数时，前面添加了*，此时函数f中的x为输入的元组本身，效果与Test 1相同。</description>
    </item>
    
    <item>
      <title>医学影像技术笔记-01-DICOM文件方向</title>
      <link>/post/2021/06/02/blog/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/06/02/blog/</guid>
      <description>本文为B站up主[@智能医学成像-贾广](https://space.bilibili.com/475985153?spm_id_from=333.788.b_765f7570696e666f.1)相关视频的笔记。
DICOM (Digital Imaging and Communications in Medicine) 是医学成像领域通用的数据格式，被广泛应用于各种医学成像设备当中，包括但不限于CT、超声、核磁共振等设备。
DICOM文件方向 DICOM文件以病人为中心，它的指向或朝向（orientation）通过头文件中的一些字段标识。这些字段包括：
 (0x0008, 0x5100), Patient Position
(0x0020, 0x0032), Image Position
(0x0020, 0x0037), Image Orientation
(0x0028, 0x0030), Pixel Spacing
(0x0018, 0x0050), Slice Thickness
 Tag: (0x0008, 0x5100) 用来记录病人进入扫描仪中的朝向或姿势。它的值为[H | F] F { [P | S] | D[R | L] }。[ ]或{ }限定取值范围，｜表示在[ ]限定的范围内二者取其一。[H | F]F表示头或脚先进入扫描仪，[P | S]表示面朝上或下，D[R | L]表示侧卧面朝右或左。例如，HFP表示病人头部先进入扫描仪，并且面朝上。
 Tag: (0x0020, 0x0032) 描述图像第一个像素（左上角）的坐标(x, y, z)。这里以病人为中心，x的正方向表示病人的左边，y的正方向表示病人的后边，z的正方向表示病人的上面。
 Tag: (0x0020, 0x0037) 该字段包含6个不超过16字节的数字，前三个表示图像矩阵从左往右的方向与图像坐标轴x、y和z的余弦值，后三个表示图像矩阵从上往下的方向与坐标轴x、y和z的余弦值。</description>
    </item>
    
    <item>
      <title>Singularity-03-创建镜像</title>
      <link>/post/2021/06/01/blog/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/06/01/blog/</guid>
      <description>在Windows 10的Linux子系统（WLS）中安装singularity(version=2.6.0)，并创建镜像。
在之前多次尝试中发现，在直接创建.simg镜像时会报告错误（Error: no more available loop devices.），导致创建失败。尝试发现可以通过添加–sandbox参数解决。完整命令如下：
sudo singularity build --sandbox image_name library/recipes 其中，image_name为镜像的名称，library/recipes可以为shub，docker链接或符合singularity语法的配置文件（config.def）。如果在wsl中，输入上述命令后，提示无法找到此命令，而直接输入singularity可以正常显示相关信息。那么可以为singularity创建链接文件解决。
sudo ln -s /usr/local/singularity/bin/singularity /usr/bin/singularit 配置文件实例：
Bootstrap: yum OSVersion: 7 MirrorURL: http://mirror.centos.org/centos-%{OSVERSION}/%{OSVERSION}/os/$basearch/ Include: yum %labels Python version: 3.9.5 R version: 4.1.0 %post yum -y update yum -y groupinstall &amp;quot;Development Tools&amp;quot; yum install -y gcc gcc-c++ gcc-gfortran java-1.8.0-openjdk.x86_64 java-1.8.0-openjdk-devel.x86_64 yum install -y readline-devel bzip2-devel libXt-devel fonts-chinese tcl tcl-devel tclx tk tk-devel mesa-libGLU mesa-libGLU-devel libcurl libcurl-devel xz-devel.</description>
    </item>
    
    <item>
      <title>Linux-sudo xxx 无法找到命令</title>
      <link>/post/2021/05/31/blog/</link>
      <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/05/31/blog/</guid>
      <description>  问题描述 安装singularity后，将其安装路径通过.bashrc文件添加进PATH，并重新载入.bashrc. 尝试运行singularity，正常可用。但运行sudo singularity时，提示无法找到此命令。
 singularity version: 2.6.0-dist
install path: /usr/local/singularity
OS version: CentOS 7
  解决方法 在/usr/bin中创建singularity的连接文件即可。
sudo ln -s /usr/local/singularity/bin/singularity /usr/bin/singularity  参考 [1] https://blog.csdn.net/tanmx219/article/details/86750322
 </description>
    </item>
    
    <item>
      <title>使用CAT12可视化皮层Surface指标</title>
      <link>/post/2021/05/27/blog/</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/05/27/blog/</guid>
      <description>  CAT12作为一种常用的神经影像数据处理和分析工具包，它提供了很多实用的功能，包括但不限于完整的VBM和SBM分析模块以及相关的统计模块。这里简单记录一下笔者使用CAT12在显示皮层厚度时遇到的问题和相应的解决方法。
问题描述 CAT12的GUI窗口中有个Display Surface的按钮（图1），可以在窗口中通过选择并显示相应的.gii文件（可以显示的文件有surf/[r|l]h.[sphere|central].name.gii）。但是对于重采样后的皮层指标，例如皮层厚度thickness (文件名为surf/s[fwhm].mesh.thickness.resampled.name.gii)，却不能通过相同的方式去显示。
 图1. CAT12图形化界面    解决方法 首先查询CAT12手册，但是手册中并没有相关的描述。进而在CAT12帮助界面中查找。发现在Surface tools中有关于可视化皮层数据的相关函数的介绍和演示（图2）。
 图2. CAT12帮助界面   随后确定cat_surf_display函数可以进行皮层指标的可视化，同时GUI中的Display Surface按钮调用的也是这个函数。通过help cat_surf_display查看该函数的说明，确定函数的输入参数以及参数的格式。最终，用于可视化皮层厚度的代码如下：
皮层厚度文件为surf/s15.mesh.thickness.resampled.anat.gii，显示效果如图3。
cat_surf_display(struct(&amp;#39;data&amp;#39;, &amp;#39;surf/s15.mesh.thickness.resampled.anat.gii&amp;#39;, &amp;#39;usefsaverage&amp;#39;, 1, &amp;#39;multisurf&amp;#39;, 1, &amp;#39;dpi&amp;#39;, 1500, &amp;#39;caxis&amp;#39;, [0, 3], &amp;#39;colormap&amp;#39;, &amp;#39;autumn&amp;#39;))  图3. 皮层厚度显示效果   另外，可以在弹出的绘图窗口上，右键单击来调整显示的参数和保存图片（图4）。
 图4. 显示参数调节    相关连接 [1] http://141.35.69.218/cat/index.html
 </description>
    </item>
    
    <item>
      <title>全屏模式Dock栏不消失</title>
      <link>/post/2021/05/26/blog/</link>
      <pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/05/26/blog/</guid>
      <description>  环境  OS: MacOS Catalina (10.15.7)
 正常情况是无论Dock是否设置自动隐藏，在全屏模式下，它都会自动隐藏。这里采取的解决方法是重置Dock的默认设置，并重启Dock栏。
 操作 defaults write com.apple.dock autohide-delay -int 0 defaults write com.apple.dock autohide-time-modifier -float 1.0 killall Dock  参考 [1] https://blog.csdn.net/santa12138/article/details/111293518
 </description>
    </item>
    
    <item>
      <title>Singularity-02-常见问题汇总</title>
      <link>/post/2021/05/20/blog/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/05/20/blog/</guid>
      <description>ERROR : Base home directory does not exist within the container: /brain 用沙盒模式创建镜像，然后以交互方式进入镜像后创建/brain目录。之后将沙盒格式的镜像打包为.img文件即可。
# 创建沙盒镜像 singularity build --sandbox centos7 docker://centos:7 # 以交互方式打开镜像 singularity shell --writable centos7/ Singularity: Invoking an interactive shell within container... # 镜像内创建缺失目录 Singularity centos7:~/envs&amp;gt; mkdir /brain Singularity centos7:~/envs&amp;gt; exit # 重新打包镜像 singularity build centos7.img centos7/  ERROR : Home directory is not owned by calling user: /usr/local/singularity-2.5.2 报错命令：singularity shell smriprep.simg
解决方法：添加–home xxx参数，这里必须是绝对路径。例如：singularity shell –home /babri/sangf/Desktop/test/ smriprep.</description>
    </item>
    
    <item>
      <title>Singularity-01-安装</title>
      <link>/post/2021/05/19/blog/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/05/19/blog/</guid>
      <description>  简单来讲，Singularity是一种可以跨平台执行的小型虚拟机。在数据分析时，首先往往要搭建运行环境，比如R，python等。为了保证结果的可靠性，通常要保证跨设备环境的一致性。但是在跨运算设备之间搭建相同的环境是一项比较麻烦的事情。因此，如果只搭建一次环境，就可以在各个设备上使用，就比较轻松了。Singularity和Docker就提供了这样的功能。笔者在这里使用Singularity[1]，版本为2.4.6。
安装依赖库 Ubuntu sudo apt-get update sudo apt-get install python dh-autoreconf build-essential libarchive-dev  CentOS sudo yum update sudo yum groupinstall &amp;#39;Development Tools&amp;#39; sudo yum install libarchive-devel   编译安装 VER=2.4.6 wget https://github.com/singularityware/singularity/releases/download/$VER/singularity-$VER.tar.gz tar xvf singularity-$VER.tar.gz cd singularity-$VER ./autogen.sh ./configure --prefix=&amp;quot;/usr/local/singularity-${VER}&amp;quot; make sudo make install 将/usr/local/singularity-2.4.6/bin添加进$PATH并重新加载配置文件。
echo &amp;quot;export $PATH=/usr/local/singularity-2.4.6/bin:$PATH&amp;quot; &amp;gt; ~/.bashrc source ~/.bashrc  图1. 显示singularity版本   参考 [1]: [https://singularity.lbl.gov/index.html]
  </description>
    </item>
    
    <item>
      <title>作图-R语言中的冲击图(Alluvial)</title>
      <link>/post/2021/05/08/blog/</link>
      <pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/05/08/blog/</guid>
      <description>冲击图可以非常直观地描述一组观测值的多个离散变量的情况。
R语言中生成冲击图需要依赖包ggalluvial. 使用以下代码安装依赖包。
install.packages(&amp;quot;ggalluvial&amp;quot;) 示例数据 这里用随机生成的虚拟数据作为示例数据data。data中每一行表示一个观测值。其中，每个观测值有三个维度的属性，分别是A，B和C。对于A属性，有3个水平，分别是a1，a2和a3。B属性有2个水平，C属性有4个水平。总共包含3000个观测值。因此，data的大小为3000*3.
data &amp;lt;- data.frame( id = seq(1:3000), A = rep(c(&amp;#39;a1&amp;#39;, &amp;#39;a2&amp;#39;, &amp;#39;a3&amp;#39;), 1000), B = rep(c(&amp;#39;b1&amp;#39;, &amp;#39;b2&amp;#39;), 1500), C = rep(c(&amp;#39;c1&amp;#39;, &amp;#39;c2&amp;#39;, &amp;#39;c3&amp;#39;, &amp;#39;c4&amp;#39;), 750) ) knitr::kable(head(data))   id A B C    1 a1 b1 c1  2 a2 b2 c2  3 a3 b1 c3  4 a1 b2 c4  5 a2 b1 c1  6 a3 b2 c2    将数据转换为长格式数据data_long。</description>
    </item>
    
    <item>
      <title>文献笔记-大脑功能网络的分离与整合</title>
      <link>/post/2021/05/05/blog/</link>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/05/05/blog/</guid>
      <description>Title  Segregated systems of human brain networks
  Notes RSFC within and between brain system exhibits progressive difference across adulthood, even in the absence of disease.
Increasing age is associated with decreasing connectivity within systems and increasing connectivity between brain systems.
 increasing age is accompanied by decreasing segregation different types of functional systems exhibit different trajectories of age-related differences in system segregation  With healthy adult , increasing segregation is associated with superior cognitive ability independently of influence of age.</description>
    </item>
    
    <item>
      <title>R语言基本统计</title>
      <link>/post/2021/05/04/blog/</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/05/04/blog/</guid>
      <description>本文为笔者在学习b站up主@学术数据分析及可视化相关视频的笔记。文中只是笔者个人的理解，描述也只是便于自己理解。在使用相关内容时，还需要进一步查看相关的手册或帮助文档。
相关 cor()用于计算两个向量的相关系数。ggm::pcor()用于计算偏相关系数。这两个函数只能计算相关系数。cor.test(), psych::cor.test和psych::pcor.test()分别计算相关系数和偏相关系数及其显著性检验的结果。
 差异性 t检验 t.test()用于进行独立样本或配对样本t检验。要求各组内方差相等。相应的非参数版本为wilcox.test()。
 方差分析 方差分析要求数据满足三个条件，分别是正态性、方差齐性和独立性。独立性一般在实验设计阶段考虑。这里只讨论前两个条件。
对正态性的检验 数据是否满足正态性可以通过直方图hist(), qq图qqplot()和shapiro.test()进行检验。其中shapiro.test()检验的零假设为数据满足正态性。
 对方差齐性的检验 方差齐性检验可以通过bartlett.test(), leveneTest()和fligner.test()进行。它们的零假设均为各组方差相等。
 单/多因素方差分析(ANOVA) 使用aov()。TukeyHSD()用于进行事后检验/多重比较。
 单/多因素重复测量方差分析(ANCOVA) aov(y~x+Error(subjects/Group))
 非参数方差分析 其中一种利用重采样的方法使用lmPerm::aovp()，用法与aov()类似。
   回归 回归拟合 lm()。 拟合通常用于数据可视化，涉及两个变量之间的关系。目的是找到两个变量之间最合适的关系。 评价模型好坏的指标有残差标准误\(\sqrt{\frac{sum(residual^2)}{n-p-1}}\)和决定系数\(R^2=1-\frac{RSS}{TSS}\)。 anova(fit, fitnull)可以比较拟合模型与零模型之间是否有差异。零模型一般为\(\hat{y}=mean(y)\)。 包aomisc提供了许多不同函数的拟合函数。以线性和指数函数拟合为例。
线性/多项式 \(y=a+bx+cx^2\) drm(y~x, fct=DRC.poly2())等价于lm(y~x+I(x^2)).
 指数 \(y=a*exp(k*x)\) drm(y~x, fct=DRC.expoDecay())
  回归分析 回归分析通常用于模型构建预测等，可以包含多个变量。
一般线性模型 lm(). AIC()用于比较模型的好坏，值越小模型越好。也可以用anova()对两个模型是否存在差异进行检验。 MASS::stepAIC(), leaps::resubsets()和car::subsets()可以筛选纳入模型的变量。car::vif()可以计算自变量的膨胀系数，值越大表示与其他变量的共线性更强。
 广义线性模型 把因变量按照特定的分布进行转换，以符合特定的概率分布，再利用该分布进行预测。glm()，需要指定函数分布族family。高斯分布的glm与lm的结果是相同的。 当响应变量为分类变量时，采用logistic（二分类）。glm(formula, data, family=binomial(‘logit’))。涉及三分类及以上时，可以用nnet::multinom()进行建模分析。
 线性混合模型 nlme和lme4包提供了相关的函数。nlme::lme(), lme4::lmer(). Eg. lme(Richness~NAP, random=~1|Beach, data) or lmer(Richness~NAP+1|Beach, data).</description>
    </item>
    
    <item>
      <title>作图-ggplot2中的直方图和条形图</title>
      <link>/post/2021/04/19/blog/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/04/19/blog/</guid>
      <description>本文用于记录ggplot2作图相关的代码，会不定期更新。
示例数据格式为
library(tidyverse) data &amp;lt;- read.csv(&amp;#39;./test.csv&amp;#39;) %&amp;gt;% as_tibble() data %&amp;gt;% head() %&amp;gt;% knitr::kable()   ID Gender Age Education    1 M 6 M  2 F 8 M  3 F 12 M  4 F 19 H  5 F 4 L  6 F 2 M    直方图 ..density..: 指明y轴为频率值，为ggplot2内置的变量。
geom_vline: 添加竖直线，线与x轴的交点由xintercept指定。
data %&amp;gt;% ggplot(aes(x=Age, y=..density..)) + geom_histogram(stat = &amp;#39;bin&amp;#39;) + geom_vline(xintercept=mean(data$Age), linetype=&amp;#39;dashed&amp;#39;, color=&amp;#39;blue&amp;#39;) + ylab(&amp;#39;Density&amp;#39;)  条形图 ggplot2的条形图，每个柱子的高度直接跟输入数据中的某一列对应，其中一个值会产生一个柱子。这跟seaborn包中catplot的逻辑不太一样：它接受一组数对应一个柱子，因此可以自动生成误差线，而不用单独添加。但也可以自定义函数，将数据转换和作图封装起来，达到类似seaborn中catplot的效果</description>
    </item>
    
    <item>
      <title>文献笔记-大脑功能网络中体现的左右半球和性别差异</title>
      <link>/post/2021/04/18/blog/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/04/18/blog/</guid>
      <description>Title  Hemisphere- and gender-related differences in small-world brain networks: A resting-state functional MRI study
  Results Male have a large normalized clustering coefficient in the right hemispheric network, but a lower clustering coefficient in the left hemispheric network.
Significant hemisphere-related differences in the regional nodal characteristics: frontal and occipital regions (leftward asymmetry), temporal regions (rightward asymmetry).
 Conclustions Topological organization of human brain functional networks is associated with gender and hemispheres.</description>
    </item>
    
    <item>
      <title>文献笔记-抑郁症大脑功能网络拓扑属性的改变</title>
      <link>/post/2021/04/16/blog/</link>
      <pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/04/16/blog/</guid>
      <description>Title  Disrupted Brain Connectivity Networks in Drug-Naive, First-Episode Major Depressive Disorder
  Results MDD患者表现出了全局属性的改变：更短的最短路径长度和更高的全局效率→朝着随机网络转变； 尾状核和默认网络脑区中心性在MDD组中增加； 枕叶、眶额和颞叶脑区中心性下降；   Conclustions MDD is associated with disruptions in the topological organization of functional brain networks; Disruption in the topological organization may contribute to disturbances in mood and cognition in MDD;   Notes 网络稀疏性选择标准：(1) 网络平局度&amp;gt;2*log(N)，N为网络节点数；(2) 小世界属性大于1.1； AUC指标提供了独立与单个稀疏性下的综合度量，summaried scale; NBS, Network-based statistic, 对网络中的连边进行统计的方法； Nonparametric permutation test; Combination of high local clustering and short path length supports the two fundamental organizational principles in the brain: functional segregation and functional integration;   Links https://doi.</description>
    </item>
    
    <item>
      <title>什么是效应量？</title>
      <link>/post/2021/04/14/blog/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/04/14/blog/</guid>
      <description>  统计当中，假设检验和P值可以给我们提供关于假设为真的可能性。例如双样本t检验可以报告两组样本所对应总体均值存在差异的可能性。若可能性小于一个比较小的值（通常设置为0.05），那我们认为在一次试验中，小概率事件不可能发生，所以拒绝零假设成立。但是我们只是知道了这两组有多大的概率相等，并不知道两组具体有多大的差异。因此我们需要引入效应量的概念。
什么是效应量 简单来讲，效应量是用来量化变量之间关系或差异具体有多大或多小的指标。其是通过样本计算得到的。
 如何计算 效应量大致分为两种类型：(1)量化变量之间关系的，也被称为r family, 和(2)量化变量之间差异的，也被称为d family。
R family有Pearson相关系数和\(r^2\)等。
D family有Cohen’s d, 优势比和相对风险率等。其中Cohen’s d计算公式如下，
\[ Cohen&amp;#39;s d=(\mu_1-\mu_2)/s, \] \[ s=\sqrt{\frac{(n_1-1)*s_1^2+(n_2-1)*s_2^2}{(n_1+n_2-2)}} \]
\(s_1\)和\(s_2\)分别表示两个样本的标准差。
 参考 http://www.atyun.com/23635.html https://www.iikx.com/news/statistics/1827.html   </description>
    </item>
    
    <item>
      <title>fMRI上广义线性模型建模简述</title>
      <link>/post/2021/04/09/blog/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/04/09/blog/</guid>
      <description>在对fMRI数据，尤其是task-fMRI数据进行分析的时候，利用广义线性模型进行建模是很重要的一步。这里简单记录一下自己关于这部分的理解。
我们的大脑每时每刻都在活动，也就造成了血氧水平的变化（BOLD）。理论上在接收到刺激以后，大脑BOLD信号的变化符合血氧动力学函数（HRF）。但是考虑到各种因素，最终大脑的变化是非常复杂的。磁共振技术可以用来收集大脑的BOLD信号。在每个TR内，都会生成一个全脑或者一定范围内大脑活动的三维图像。对于其中的一个体素来说，假设它的信号为**$y$**。这里只考虑一种刺激条件的情况。如图1所示。
 图2. 理论上，BOLD信号和体素y信号的关系。  当给予刺激之后，根据刺激的时间、时长和HRF，我们可以估计出某个体素理论上的BOLD信号。然后在这段时间内进行采样，就可以得到一系列的**$y$和对应理论上的BOLD信号$x$（图2）。通过广义线性模型，我们就可以估计出相应的系数$\beta$**。
 图2. 通过采样之后BOLD信号和体素y信号的关系  </description>
    </item>
    
    <item>
      <title>移动硬盘图标异常</title>
      <link>/post/2021/04/08/blog/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/04/08/blog/</guid>
      <description>问题描述：访达侧边栏移动硬盘的图标显示如图1，感觉是不正常的显示。图2为正常显示的图标。
环境：
 macOS: Big Sur 11.2.3 移动硬盘：希捷 iRightMouse: 2.1.1
  图1. 显示异常的图标   图2. 正常显示的图标  解决方案：在系统偏好设置里面的扩展模块，把新近安装的访达扩展取消勾选即可（图3）。本机问题为超级右键的扩展导致的。取消勾选即可恢复正常的磁盘图标。但是取消之后，相关软件在访达里面的扩张功能也就没办法使用了。请自行斟酌。
 图3. 操作顺序  参考  https://discussionschinese.apple.com/thread/252297105  </description>
    </item>
    
    <item>
      <title>全屏模式下iTerm2标题栏闪动</title>
      <link>/post/2021/04/07/blog/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/04/07/blog/</guid>
      <description>起因 在更新BigSur之后的某一天，突然发现iTerm2在全屏模式下，顶部不时会出现一条白色的线闪动。后来在一个论坛里面看到有人说貌似是系统的问题。但是很奇怪，室友的电脑上就没有这样的情况。中间也试过重装系统（PS：强迫症重度患者），但还是会出现。
通过排查，发现只有iTerm2配色选择深色主题，并且系统主题为浅色主题时，才会出现上述的问题。
 系统版本：macOS Big Sur 11.2.3
  iTerm2版本：Build 3.4.4
 解决 打开iTerm2偏好设置，选择高级。在文本框中输入big sur，把通用这一行改为是即可。如图1.
 图1. 操作顺序  参考  https://blog.csdn.net/lxyoucan/article/details/115085694 https://gitlab.com/gnachman/iterm2/-/issues/9199  </description>
    </item>
    
    <item>
      <title>利用blogdown建立个人博客</title>
      <link>/post/2021/04/04/blog/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/04/04/blog/</guid>
      <description>准备工作 安装RStudio和R包blogdown。
创建博客 在R终端中输入如下代码即可创建默认主题的博客。
blogdown::new_site() 另外也可以在RStudio中通过图形界面创建。
  鼠标点击File -&amp;gt; New Project&amp;hellip; -&amp;gt; New Directory -&amp;gt; Website using blogdown
  在弹出的对话框的Directory name内输入本地存放项目的目录名。Create project as subdirectory of: 为项目的父目录。之后点击Create Project 按钮。Hugo theme为博客的主题。这里我们用默认主题。其他主题参考HUGO主题页面。
  在R终端中输入blogdown::server_site()即可在本地部署博客。  在Gitee上部署博客  首先需要在gitee上创建仓库，并将Depoly directory更改为 “.”（不带引号） 。   在R终端中输入blogdown::hugo_build(relativeURLs=TRUE)并运行。可以看到在home目录下生成了public。该目录下即为生成的博客静态页面。此时点击public/index.html是可以在浏览器查看的。
  将public中的文件同步到刚创建的gitee或github仓库中。使用的命令如下：
cd public git init git add . git commit -m &amp;#39;first commit&amp;#39; git remote add origin xxxx.git git push -f origin master   之后就可以通过访问username.</description>
    </item>
    
  </channel>
</rss>
