<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Feng Sang | 桑峰</title>
    <link>/tags/r/</link>
    <description>Recent content in R on Feng Sang | 桑峰</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 19 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Weekly summary</title>
      <link>/post/2021/11/19/blog/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/11/19/blog/</guid>
      <description>自定义Colormap 在一些场景下，我们需要自己构造数字与颜色的对应关系。比如，我们在探究每个ROI随龄变化的趋势时，我们需要将回归方程中年龄的系数展示在脑图上。朴素的想法是，我构造一个关于系数与颜色的映射关系，给定某一系数，就返回相应的颜色。实现方法如下：
library(tidyverse) library(RColorBrewer) data &amp;lt;- data.frame(Val = rnorm(100)) %&amp;gt;% as_tibble() # 选择合适的颜色 colors &amp;lt;- brewer.pal(11, &amp;#39;RdBu&amp;#39;) # 考虑到数字的正负号，我们这里用差异较明显的颜色区分正负 pos.color &amp;lt;- colorRampPalette(colors[6:1])(1000 * round(max(data$Val), 3) + 1) neg.color &amp;lt;- colorRampPalette(colors[6:11])(-1000 * round(min(data$Val), 3) + 1) res &amp;lt;- rep(&amp;#39;&amp;#39;, length(data$Val)) for (i in 1:length(data$Val)) { if (round(data$Val[i], 3) &amp;lt; 0) { res[i] &amp;lt;- neg.color[1000 * round(-data$Val[i], 3)] } else if (round(data$Val[i], 3) &amp;gt; 0) { res[i] &amp;lt;- pos.color[1000 * round(data$Val[i], 3)] } else { res[i] &amp;lt;- pos.</description>
    </item>
    
    <item>
      <title>一周小结</title>
      <link>/post/2021/09/03/blog/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/09/03/blog/</guid>
      <description>Python并行处理 Python 中的concurrent包提供了对于并行运行的接口，包括进程级并行和线程级并行。下面是一个例子。
from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor def func(a, b): return a*b if __name__ == &amp;#39;__main__&amp;#39;: n_core = 4 nums = 10000 b = 2 res = [0 for _ in range(nums)] with ProcessPoolExecutor(n_core) as pool: futures = {pool.submit(func, i, b): i for i in range(1, nums)} for f in futures: res[futures[f]] = f.result() res = [0 for _ in range(nums)] with ThreadPoolExecutor(n_core) as pool: futures = {pool.</description>
    </item>
    
    <item>
      <title>作图-R语言中的冲击图(Alluvial)</title>
      <link>/post/2021/05/08/blog/</link>
      <pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/05/08/blog/</guid>
      <description>冲击图可以非常直观地描述一组观测值的多个离散变量的情况。
R语言中生成冲击图需要依赖包ggalluvial. 使用以下代码安装依赖包。
install.packages(&amp;quot;ggalluvial&amp;quot;) 示例数据 这里用随机生成的虚拟数据作为示例数据data。data中每一行表示一个观测值。其中，每个观测值有三个维度的属性，分别是A，B和C。对于A属性，有3个水平，分别是a1，a2和a3。B属性有2个水平，C属性有4个水平。总共包含3000个观测值。因此，data的大小为3000*3.
data &amp;lt;- data.frame( id = seq(1:3000), A = rep(c(&amp;#39;a1&amp;#39;, &amp;#39;a2&amp;#39;, &amp;#39;a3&amp;#39;), 1000), B = rep(c(&amp;#39;b1&amp;#39;, &amp;#39;b2&amp;#39;), 1500), C = rep(c(&amp;#39;c1&amp;#39;, &amp;#39;c2&amp;#39;, &amp;#39;c3&amp;#39;, &amp;#39;c4&amp;#39;), 750) ) knitr::kable(head(data))   id A B C    1 a1 b1 c1  2 a2 b2 c2  3 a3 b1 c3  4 a1 b2 c4  5 a2 b1 c1  6 a3 b2 c2    将数据转换为长格式数据data_long。</description>
    </item>
    
    <item>
      <title>R语言基本统计</title>
      <link>/post/2021/05/04/blog/</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/05/04/blog/</guid>
      <description>本文为笔者在学习b站up主@学术数据分析及可视化相关视频的笔记。文中只是笔者个人的理解，描述也只是便于自己理解。在使用相关内容时，还需要进一步查看相关的手册或帮助文档。
相关 cor()用于计算两个向量的相关系数。ggm::pcor()用于计算偏相关系数。这两个函数只能计算相关系数。cor.test(), psych::cor.test和psych::pcor.test()分别计算相关系数和偏相关系数及其显著性检验的结果。
 差异性 t检验 t.test()用于进行独立样本或配对样本t检验。要求各组内方差相等。相应的非参数版本为wilcox.test()。
 方差分析 方差分析要求数据满足三个条件，分别是正态性、方差齐性和独立性。独立性一般在实验设计阶段考虑。这里只讨论前两个条件。
对正态性的检验 数据是否满足正态性可以通过直方图hist(), qq图qqplot()和shapiro.test()进行检验。其中shapiro.test()检验的零假设为数据满足正态性。
 对方差齐性的检验 方差齐性检验可以通过bartlett.test(), leveneTest()和fligner.test()进行。它们的零假设均为各组方差相等。
 单/多因素方差分析(ANOVA) 使用aov()。TukeyHSD()用于进行事后检验/多重比较。
 单/多因素重复测量方差分析(ANCOVA) aov(y~x+Error(subjects/Group))
 非参数方差分析 其中一种利用重采样的方法使用lmPerm::aovp()，用法与aov()类似。
   回归 回归拟合 lm()。 拟合通常用于数据可视化，涉及两个变量之间的关系。目的是找到两个变量之间最合适的关系。 评价模型好坏的指标有残差标准误\(\sqrt{\frac{sum(residual^2)}{n-p-1}}\)和决定系数\(R^2=1-\frac{RSS}{TSS}\)。 anova(fit, fitnull)可以比较拟合模型与零模型之间是否有差异。零模型一般为\(\hat{y}=mean(y)\)。 包aomisc提供了许多不同函数的拟合函数。以线性和指数函数拟合为例。
线性/多项式 \(y=a+bx+cx^2\) drm(y~x, fct=DRC.poly2())等价于lm(y~x+I(x^2)).
 指数 \(y=a*exp(k*x)\) drm(y~x, fct=DRC.expoDecay())
  回归分析 回归分析通常用于模型构建预测等，可以包含多个变量。
一般线性模型 lm(). AIC()用于比较模型的好坏，值越小模型越好。也可以用anova()对两个模型是否存在差异进行检验。 MASS::stepAIC(), leaps::resubsets()和car::subsets()可以筛选纳入模型的变量。car::vif()可以计算自变量的膨胀系数，值越大表示与其他变量的共线性更强。
 广义线性模型 把因变量按照特定的分布进行转换，以符合特定的概率分布，再利用该分布进行预测。glm()，需要指定函数分布族family。高斯分布的glm与lm的结果是相同的。 当响应变量为分类变量时，采用logistic（二分类）。glm(formula, data, family=binomial(‘logit’))。涉及三分类及以上时，可以用nnet::multinom()进行建模分析。
 线性混合模型 nlme和lme4包提供了相关的函数。nlme::lme(), lme4::lmer(). Eg. lme(Richness~NAP, random=~1|Beach, data) or lmer(Richness~NAP+1|Beach, data).</description>
    </item>
    
    <item>
      <title>作图-ggplot2中的直方图和条形图</title>
      <link>/post/2021/04/19/blog/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/04/19/blog/</guid>
      <description>本文用于记录ggplot2作图相关的代码，会不定期更新。
示例数据格式为
library(tidyverse) data &amp;lt;- read.csv(&amp;#39;./test.csv&amp;#39;) %&amp;gt;% as_tibble() data %&amp;gt;% head() %&amp;gt;% knitr::kable()   ID Gender Age Education    1 M 6 M  2 F 8 M  3 F 12 M  4 F 19 H  5 F 4 L  6 F 2 M    直方图 ..density..: 指明y轴为频率值，为ggplot2内置的变量。
geom_vline: 添加竖直线，线与x轴的交点由xintercept指定。
data %&amp;gt;% ggplot(aes(x=Age, y=..density..)) + geom_histogram(stat = &amp;#39;bin&amp;#39;) + geom_vline(xintercept=mean(data$Age), linetype=&amp;#39;dashed&amp;#39;, color=&amp;#39;blue&amp;#39;) + ylab(&amp;#39;Density&amp;#39;)  条形图 ggplot2的条形图，每个柱子的高度直接跟输入数据中的某一列对应，其中一个值会产生一个柱子。这跟seaborn包中catplot的逻辑不太一样：它接受一组数对应一个柱子，因此可以自动生成误差线，而不用单独添加。但也可以自定义函数，将数据转换和作图封装起来，达到类似seaborn中catplot的效果</description>
    </item>
    
    <item>
      <title>利用blogdown建立个人博客</title>
      <link>/post/2021/04/04/blog/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/04/04/blog/</guid>
      <description>准备工作 安装RStudio和R包blogdown。
创建博客 在R终端中输入如下代码即可创建默认主题的博客。
blogdown::new_site() 另外也可以在RStudio中通过图形界面创建。
  鼠标点击File -&amp;gt; New Project&amp;hellip; -&amp;gt; New Directory -&amp;gt; Website using blogdown
  在弹出的对话框的Directory name内输入本地存放项目的目录名。Create project as subdirectory of: 为项目的父目录。之后点击Create Project 按钮。Hugo theme为博客的主题。这里我们用默认主题。其他主题参考HUGO主题页面。
  在R终端中输入blogdown::server_site()即可在本地部署博客。  在Gitee上部署博客  首先需要在gitee上创建仓库，并将Depoly directory更改为 “.”（不带引号） 。   在R终端中输入blogdown::hugo_build(relativeURLs=TRUE)并运行。可以看到在home目录下生成了public。该目录下即为生成的博客静态页面。此时点击public/index.html是可以在浏览器查看的。
  将public中的文件同步到刚创建的gitee或github仓库中。使用的命令如下：
cd public git init git add . git commit -m &amp;#39;first commit&amp;#39; git remote add origin xxxx.git git push -f origin master   之后就可以通过访问username.</description>
    </item>
    
  </channel>
</rss>
