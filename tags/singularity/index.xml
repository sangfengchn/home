<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>singularity on Feng Sang | 桑峰</title>
    <link>/tags/singularity/</link>
    <description>Recent content in singularity on Feng Sang | 桑峰</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 21 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/singularity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Singularity-05-Matlab&amp;fmriprep</title>
      <link>/post/2022/02/21/blog/</link>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022/02/21/blog/</guid>
      <description>  运行MATLAB 使用matlab镜像运行matlab可使用如下命令：
singularity exec matlab-r2020a.img matlab -batch xxx 其中matlab-r2020a.img为镜像名称，xxx为matlab脚本，不包含.m。
 运行fmriprep 脑院高性能平台最高支持fmriprep版本为20.1.3，版本再高会报告I/O异常的错误。
在镜像中运行fmriprep的命令（不同版本的命令有些许差异，这里以20.1.3为例）如下：
singularity exec fmriprep-20.1.3.simg fmriprep data-test/ fres_data-test/ participant \ --skip_bids_validation \ --participant_label 12002 \ -w fwk_data-test/ \ --verbose \ --fs-license-file license_lin.txt 其中fmriprep-20.1.3.simg为镜像名称。data-test为存放所有被试的文件夹。
运行smriprep的命令如下：
singularity exec fmriprep-20.1.3.simg smriprep data-test/ sres_data-test/ participant \ --pariticipant_label 12002 \ -w fwk_data-test/ \ --fs-license-file license_lin.txt  </description>
    </item>
    
    <item>
      <title>Singularity-04-安装MATLAB</title>
      <link>/post/2022/02/17/blog/</link>
      <pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022/02/17/blog/</guid>
      <description>以下是记录本人在使用学院高性能计算平台运行singularity中遇到的问题以及相应的解决方法，不一定适用于其他场景。
建立基础镜像 sudo singularity build --sandbox tmp/ docker://centos:7 尝试过ubuntu:20.04和18.04，在服务器上均会报告“FATAL: kernel too old”的错误。Centos6.10和7可以，但是6.10的yum源已经不再支持。因此使用Centos7作为基础镜像。
 安装MATLAB 这里参考：https://zhuanlan.zhihu.com/p/394298249
需要注意的是，安装之前，需要在系统里面安装一些库文件和编译器，命令如下：
yum install libX11 libXmu yum install gcc java-11-openjdk-devel libXmu中包含libXt.so.6。
 后处理 安装好MATLAB后，发现无法通过singularity exec去调用。在/environment文件中将MATLAB的安装路径添加进PATH环境变量里面也无法直接运行（可能是写入的命令格式有问题，不确定）。之后查到可以定义一个recipe文件（append.def），通过已经生成的镜像重新构建镜像。recipe文件内容如下：
Bootstrap: localimage From: tmp/ %environment export PATH=/usr/local/matlab/R2020a/bin:$PATH 然后重新构建镜像：
sudo singularity build --sandbox senv-matlab/ append.def 构建完成后，需要将镜像打包为可读写的格式（.img文件）。
sudo singularity build --writable senv-matlab.img senv-matlab/ 这里生成的senv-matlab.img就可在服务器上使用了，也可在服务器上将其转换为压缩格式（.sif/.sqsh/.simg文件等）。不知道为什么直接在本地（Ubuntu 21.10）压缩后，在本地无运行镜像，会报告如下错误。
ERROR : Failed to mount squashfs image in (read only): Invalid argument ABORT : Retval = 255  参考 https://zhuanlan.</description>
    </item>
    
    <item>
      <title>Singularity-03-创建镜像</title>
      <link>/post/2021/06/01/blog/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/06/01/blog/</guid>
      <description>在Windows 10的Linux子系统（WLS）中安装singularity(version=2.6.0)，并创建镜像。
在之前多次尝试中发现，在直接创建.simg镜像时会报告错误（Error: no more available loop devices.），导致创建失败。尝试发现可以通过添加–sandbox参数解决。完整命令如下：
sudo singularity build --sandbox image_name library/recipes 其中，image_name为镜像的名称，library/recipes可以为shub，docker链接或符合singularity语法的配置文件（config.def）。如果在wsl中，输入上述命令后，提示无法找到此命令，而直接输入singularity可以正常显示相关信息。那么可以为singularity创建链接文件解决。
sudo ln -s /usr/local/singularity/bin/singularity /usr/bin/singularit 配置文件实例：
Bootstrap: yum OSVersion: 7 MirrorURL: http://mirror.centos.org/centos-%{OSVERSION}/%{OSVERSION}/os/$basearch/ Include: yum %labels Python version: 3.9.5 R version: 4.1.0 %post yum -y update yum -y groupinstall &amp;quot;Development Tools&amp;quot; yum install -y gcc gcc-c++ gcc-gfortran java-1.8.0-openjdk.x86_64 java-1.8.0-openjdk-devel.x86_64 yum install -y readline-devel bzip2-devel libXt-devel fonts-chinese tcl tcl-devel tclx tk tk-devel mesa-libGLU mesa-libGLU-devel libcurl libcurl-devel xz-devel.</description>
    </item>
    
    <item>
      <title>Singularity-02-常见问题汇总</title>
      <link>/post/2021/05/20/blog/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/05/20/blog/</guid>
      <description>ERROR : Base home directory does not exist within the container: /brain 用沙盒模式创建镜像，然后以交互方式进入镜像后创建/brain目录。之后将沙盒格式的镜像打包为.img文件即可。
# 创建沙盒镜像 singularity build --sandbox centos7 docker://centos:7 # 以交互方式打开镜像 singularity shell --writable centos7/ Singularity: Invoking an interactive shell within container... # 镜像内创建缺失目录 Singularity centos7:~/envs&amp;gt; mkdir /brain Singularity centos7:~/envs&amp;gt; exit # 重新打包镜像 singularity build centos7.img centos7/  ERROR : Home directory is not owned by calling user: /usr/local/singularity-2.5.2 报错命令：singularity shell smriprep.simg
解决方法：添加–home xxx参数，这里必须是绝对路径。例如：singularity shell –home /babri/sangf/Desktop/test/ smriprep.</description>
    </item>
    
    <item>
      <title>Singularity-01-安装</title>
      <link>/post/2021/05/19/blog/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/05/19/blog/</guid>
      <description>  简单来讲，Singularity是一种可以跨平台执行的小型虚拟机。在数据分析时，首先往往要搭建运行环境，比如R，python等。为了保证结果的可靠性，通常要保证跨设备环境的一致性。但是在跨运算设备之间搭建相同的环境是一项比较麻烦的事情。因此，如果只搭建一次环境，就可以在各个设备上使用，就比较轻松了。Singularity和Docker就提供了这样的功能。笔者在这里使用Singularity[1]，版本为2.4.6。
安装依赖库 Ubuntu sudo apt-get update sudo apt-get install python dh-autoreconf build-essential libarchive-dev  CentOS sudo yum update sudo yum groupinstall &amp;#39;Development Tools&amp;#39; sudo yum install libarchive-devel   编译安装 VER=2.4.6 wget https://github.com/singularityware/singularity/releases/download/$VER/singularity-$VER.tar.gz tar xvf singularity-$VER.tar.gz cd singularity-$VER ./autogen.sh ./configure --prefix=&amp;quot;/usr/local/singularity-${VER}&amp;quot; make sudo make install 将/usr/local/singularity-2.4.6/bin添加进$PATH并重新加载配置文件。
echo &amp;quot;export $PATH=/usr/local/singularity-2.4.6/bin:$PATH&amp;quot; &amp;gt; ~/.bashrc source ~/.bashrc  图1. 显示singularity版本   参考 [1]: [https://singularity.lbl.gov/index.html]
  </description>
    </item>
    
  </channel>
</rss>
